/**
    /**
     * //     * Checking verical columns for wins (4 in a row)
     * //     * @param row
     * //     * @param col
     * //     * @param board
     * //     * @return
     */
    public boolean checkWin() {
        int verticalIndex=0;
        int horizontalIndex = 0;
        int diagonalIndexLeft = 0;
        int diagonalIndexRight = 0;
        int diagonalIndexRow = 0;
        int diagonalIndexCol=0;

        Boolean checkWin=false;
        //Vertical checking
        int piecesInCol =0;
        int piecesInRow = 0;
        int temp=0;
        temp = board[0][col];
        for(int i=0;i<board.length;i++)
        {
            if(board[i][col]!=0)
            {
                piecesInCol++;
            }
        }
        for(int i=0;i<piecesInCol;i++)
        {
            if (temp == 0) {
                break;
            }
            if (temp == board[i][col]) {
                verticalIndex++;
            } else {
                temp = board[i][col];
                verticalIndex = 1;
            }
            if (verticalIndex == 4) {
                //System.out.println("caught vertical");
                checkWin = true;
                return checkWin;
            }
        }
        //
        for (int i = 0; i < 6; i++) {
            for (int j = 1; j < 7; j++)
            {
                if (board[i][j] != 0 && board[i][j] == board[i][j - 1]) {
                    horizontalIndex++;
                } else {
                    horizontalIndex = 1;
                }
                if (horizontalIndex == 4) {
                    checkWin = true;
                    //System.out.println("caught horizontal");
                    return checkWin;
                }
            }
        }
        for (int i = 0; i < 6; i++)
        {
            for (int j = 1; j < 7; j++) {
                if (i + j >= 6) break;
                if (board[j][i + j] != 0 && board[j - 1][(j + i) - 1] == board[j][i + j]) {
                    diagonalIndexLeft++;
                } else
                {
                    diagonalIndexLeft = 1;
                }
                if (diagonalIndexLeft == 4 || diagonalIndexRow == 4 ) {
                    checkWin = true;
                    //System.out.println("Caught diagonal bottom left to top right");
                    //printBoard(board);
                    return checkWin;
                }
            }
        }
        for (int i = 0; i < 6; i++) {
            for (int j = 1; j < 7; j++)
            {
                if(i+j>=6)break;
                if (board[j + i][j] != 0 && board[(i + j) - 1][j - 1] == board[i + j][j]) {
                    diagonalIndexRow++;
                } else {
                    diagonalIndexRow = 1;
                }
                if (diagonalIndexRow == 4 ) {
                    checkWin = true;
                    //System.out.println("Caught diagonal row");
                    //printBoard(board);
                    return checkWin;
                }
            }

        }
            for (int i = 0; i < 6; i++) {
                for (int j = 1; j < 7; j++)
                {
                    diagonalIndexRight=0;
                    if(i-j<0)break;
                    if (board[j][i - j] != 0 && board[j - 1][(i - j) + 1] == board[j][i - j]) {
                        diagonalIndexRight++;
                    } else {
                        diagonalIndexRight = 1;
                    }
                    if (diagonalIndexRight == 4 ) {
                        checkWin = true;
                        //System.out.println("Caught diagonal righty");
                        //printBoard(board);
                        return checkWin;
                    }
                }
            }
        for (int i = 0; i < 6; i++)
        {
            for (int j = 4; j >= 0; j--)
            {
                if(j-i<0)break;
                if (board[j-i][j] != 0 && board[(j-i)+1][j + 1] == board[j-i][j]) {
                    diagonalIndexCol++;
                } else {
                    diagonalIndexCol = 1;
                }
                if (diagonalIndexCol == 4 ) {
                    checkWin = true;
                    //System.out.println("Caught diagonal col");
                    //printBoard(board);
                    return checkWin;
                }
            }
        }
        return checkWin;
}


//    public static void main(String[] args) throws IOException
//    {
//        Board b = new Board();
//        board = b.runBoard();
//        currentPlayer=1;
//        Random rand = new Random();
//        System.out.println("INITAL BOARD");
//        b.printBoard(board);
//        miniMax miniMax= new miniMax(30000000,b);
//        int column=0;
//        while(b.isFinished()==-1)
//        {
//            if(currentPlayer==1)
//            {
//                System.out.println("After player 1");
//
//                column = (rand.nextInt() * 100) % 6;
//            }
//            else
//            {
//                System.out.println("After player 2");
//                column = miniMax.miniMaxDecision(b);
//            }
//            while(!b.insert(column,currentPlayer))
//            {
//                column = (rand.nextInt() * 100) % 6;
//            }
//            b.printBoard(board);
//            changePlayer();
//            winner =b.isFinished();
//        }
//    }
//    public static void changePlayer()
//    {
//        if (currentPlayer == 1)
//            currentPlayer = 2;
//        else currentPlayer = 1;
//    }
int verticalIndex = 0;
        int horizontalIndex = 0;
        int diagonalIndexLeft = 0;
        int diagonalIndexRight = 0;
        int diagonalIndexRow = 0;
        int diagonalIndexCol = 0;

        Boolean checkWin = false;
        //Vertical checking
        int piecesInCol = 0;
        int piecesInRow = 0;
        int temp = 0;
        temp = board[0][col];
        for (int i = 0; i < board.length; i++) {
            if (board[i][col] != 0) {
                piecesInCol++;
            }
        }
        for (int i = 0; i < piecesInCol; i++) {
            if (temp == 0) {
                break;
            }
            if (temp == board[i][col]) {
                verticalIndex++;
            } else {
                temp = board[i][col];
                verticalIndex = 1;
            }
            if (verticalIndex == 4) {
                //System.out.println("caught vertical");
                checkWin = true;
                return checkWin;
            }
        }
        //
        for (int i = 0; i < 6; i++) {
            for (int j = 1; j < 7; j++) {
                if (board[i][j] != 0 && board[i][j] == board[i][j - 1]) {
                    horizontalIndex++;
                } else {
                    horizontalIndex = 1;
                }
                if (horizontalIndex == 4) {
                    checkWin = true;
                    //System.out.println("caught horizontal");
                    return checkWin;
                }
            }
        }
       for (int i = 0; i < 6; i++) {
            for (int j = 1; j < 7; j++) {
                if (i + j >= 6) break;
                if (board[j][i + j] != 0 && board[j - 1][(j + i) - 1] == board[j][i + j]) {
                    diagonalIndexLeft++;
                } else {
                    diagonalIndexLeft = 1;
                }
                if (diagonalIndexLeft == 4 || diagonalIndexRow == 4) {
                    checkWin = true;
                    //System.out.println("Caught diagonal bottom left to top right");
                    //printBoard(board);
                    return checkWin;
                }
            }
        }
        for (int i = 0; i < 6; i++) {
            for (int j = 1; j < 7; j++) {
                if (i + j >= 6) break;
                if (board[j + i][j] != 0 && board[(i + j) - 1][j - 1] == board[i + j][j]) {
                    diagonalIndexRow++;
                } else {
                    diagonalIndexRow = 1;
                }
                if (diagonalIndexRow == 4) {
                    checkWin = true;
                    //System.out.println("Caught diagonal row");
                    //printBoard(board);
                    return checkWin;
                }
            }

        }
        for (int i = 0; i < 6; i++) {
            for (int j = 1; j < 7; j++) {
                diagonalIndexRight = 0;
                if (i - j < 0) break;
                if (board[j][i - j] != 0 && board[j - 1][(i - j) + 1] == board[j][i - j]) {
                    diagonalIndexRight++;
                } else {
                    diagonalIndexRight = 1;
                }
                if (diagonalIndexRight == 4) {
                    checkWin = true;
                    //System.out.println("Caught diagonal righty");
                    //printBoard(board);
                    return checkWin;
                }
            }
        }
        for (int i = 0; i < 6; i++) {
            for (int j = 4; j >= 0; j--) {
                if (j - i < 0) break;
                if (board[j - i][j] != 0 && board[(j - i) + 1][j + 1] == board[j - i][j]) {
                    diagonalIndexCol++;
                } else {
                    diagonalIndexCol = 1;
                }
                if (diagonalIndexCol == 4) {
                    checkWin = true;
                    //System.out.println("Caught diagonal col");
                    //printBoard(board);
                    return checkWin;
                }
            }
        }

import java.util.Random;
import java.util.Scanner;

/**
 * Created by krm1929 on 4/6/2016.
 */
public class miniMax
{
    private Board b;
    private Random rand;
    private int nextMoveLocation=-1;
    private int maxDepth = 7;

    public miniMax(Board b){
        this.b = b;
        rand = new Random();
    }
    public void letOpponentMove()
    {
        System.out.println("Your move (1-7): ");
        int move = Math.abs((rand.nextInt()*100)%6);
        while(move<1 || move > 7 || !b.isLegalMove(move)){
            System.out.println("Invalid move.\n\nYour move (1-7): ");
            move = Math.abs((rand.nextInt()*100)%6);
        }

        b.placeMove(move, 1);
    }

    int calculateScore(int aiScore, int moreMoves){
        int moveScore = 4 - moreMoves;
        if(aiScore==0)return 0;
        else if(aiScore==1)return 1*moveScore;
        else if(aiScore==2)return 10*moveScore;
        else if(aiScore==3)return 100*moveScore;
        else return 1000;
    }
    public int evaluateBoard(Board b) {

        int aiScore = 1;
        int score = 0;
        int blanks = 0;
        int k = 0, moreMoves = 0;
        for (int i = 5; i >= 0; --i) {
            for (int j = 0; j <= 6; ++j) {

                if (b.getBoard()[i][j] == 0 || b.getBoard()[i][j] == 2) continue;

                if (j <= 3) {
                    for (k = 1; k < 4; ++k) {
                        if (b.getBoard()[i][j + k] == 1) aiScore++;
                        else if (b.getBoard()[i][j + k] == 2) {
                            aiScore = 0;
                            blanks = 0;
                            break;
                        } else blanks++;
                    }

                    moreMoves = 0;
                    if (blanks > 0)
                        for (int c = 1; c < 4; ++c) {
                            int column = j + c;
                            for (int m = i; m <= 5; m++) {
                                if (b.getBoard()[m][column] == 0) moreMoves++;
                                else break;
                            }
                        }

                    if (moreMoves != 0) score += calculateScore(aiScore, moreMoves);
                    aiScore = 1;
                    blanks = 0;
                }

                if (i >= 3) {
                    for (k = 1; k < 4; ++k) {
                        if (b.getBoard()[i - k][j] == 1) aiScore++;
                        else if (b.getBoard()[i - k][j] == 2) {
                            aiScore = 0;
                            break;
                        }
                    }
                    moreMoves = 0;

                    if (aiScore > 0) {
                        int column = j;
                        for (int m = i - k + 1; m <= i - 1; m++) {
                            if (b.getBoard()[m][column] == 0) moreMoves++;
                            else break;
                        }
                    }
                    if (moreMoves != 0) score += calculateScore(aiScore, moreMoves);
                    aiScore = 1;
                    blanks = 0;
                }

                if (j >= 3) {
                    for (k = 1; k < 4; ++k) {
                        if (b.getBoard()[i][j - k] == 1) aiScore++;
                        else if (b.getBoard()[i][j - k] == 2) {
                            aiScore = 0;
                            blanks = 0;
                            break;
                        } else blanks++;
                    }
                    moreMoves = 0;
                    if (blanks > 0)
                        for (int c = 1; c < 4; ++c) {
                            int column = j - c;
                            for (int m = i; m <= 5; m++) {
                                if (b.getBoard()[m][column] == 0) moreMoves++;
                                else break;
                            }
                        }

                    if (moreMoves != 0) score += calculateScore(aiScore, moreMoves);
                    aiScore = 1;
                    blanks = 0;
                }

                if (j <= 3 && i >= 3) {
                    for (k = 1; k < 4; ++k) {
                        if (b.getBoard()[i - k][j + k] == 1) aiScore++;
                        else if (b.getBoard()[i - k][j + k] == 2) {
                            aiScore = 0;
                            blanks = 0;
                            break;
                        } else blanks++;
                    }
                    moreMoves = 0;
                    if (blanks > 0) {
                        for (int c = 1; c < 4; ++c) {
                            int column = j + c, row = i - c;
                            for (int m = row; m <= 5; ++m) {
                                if (b.getBoard()[m][column] == 0) moreMoves++;
                                else if (b.getBoard()[m][column] == 1) ;
                                else break;
                            }
                        }
                        if (moreMoves != 0) score += calculateScore(aiScore, moreMoves);
                        aiScore = 1;
                        blanks = 0;
                    }
                }

                if (i >= 3 && j >= 3) {
                    for (k = 1; k < 4; ++k) {
                        if (b.getBoard()[i - k][j - k] == 1) aiScore++;
                        else if (b.getBoard()[i - k][j - k] == 2) {
                            aiScore = 0;
                            blanks = 0;
                            break;
                        } else blanks++;
                    }
                    moreMoves = 0;
                    if (blanks > 0) {
                        for (int c = 1; c < 4; ++c) {
                            int column = j - c, row = i - c;
                            for (int m = row; m <= 5; ++m) {
                                if (b.getBoard()[m][column] == 0) moreMoves++;
                                else if (b.getBoard()[m][column] == 1) ;
                                else break;
                            }
                        }
                        if (moreMoves != 0) score += calculateScore(aiScore, moreMoves);
                        aiScore = 1;
                        blanks = 0;
                    }
                }
            }
        }
        return score;
    }

    public int minimax(int depth, int turn){
        int gameResult = gameResult(b);
        if(gameResult==1)return Integer.MAX_VALUE;
        else if(gameResult==2)return Integer.MIN_VALUE;
        else if(gameResult==0)return 0;

        if(depth==maxDepth)return evaluateBoard(b);

        int maxScore=Integer.MIN_VALUE, minScore = Integer.MAX_VALUE;
        for(int j=0;j<=6;++j){
            if(!b.isLegalMove(j)) continue;

            if(turn==1){
                b.placeMove(j, 1);
                int currentScore = minimax(depth+1, 2);
                maxScore = Math.max(currentScore, maxScore);
                if(depth==0){
                    System.out.println("Score for location "+j+" = "+currentScore);
                    if(maxScore==currentScore) nextMoveLocation = j;
                }
            }else if(turn==2){
                b.placeMove(j, 2);
                int currentScore = minimax(depth+1, 1);
                minScore = Math.min(currentScore, minScore);
            }
            b.undoMove(j);
        }
        return turn==1?maxScore:minScore;
    }
    public void startMinimax()
    {//
        while(true){
            letOpponentMove();
            b.printBoard();

            int gameResult = gameResult(b);
            if(gameResult==1){System.out.println("AI Wins!");break;}
            else if(gameResult==2){System.out.println("You Win!");break;}
            else if(gameResult==0){System.out.println("Draw!");break;}

            b.placeMove(getAIMove(), 2);
            gameResult = gameResult(b);
            if(gameResult==1){System.out.println("AI Wins!");break;}
            else if(gameResult==2){System.out.println("You Win!");break;}
            else if(gameResult==0){System.out.println("Draw!");break;}
        }

    }
    public int getAIMove(){
        nextMoveLocation = -1;
        minimax(0, 1);
        return nextMoveLocation;
    }
        //Game Result
    public int gameResult(Board b){
        int aiScore = 0, humanScore = 0;
        for(int i=5;i>=0;--i){
            for(int j=0;j<=6;++j){
                if(b.board[i][j]==0) continue;

                //Checking cells to the right
                if(j<=3){
                    for(int k=0;k<4;++k){
                        if(b.board[i][j+k]==1) aiScore++;
                        else if(b.board[i][j+k]==2) humanScore++;
                        else break;
                    }
                    if(aiScore==4)return 1; else if (humanScore==4)return 2;
                    aiScore = 0; humanScore = 0;
                }

                //Checking cells up
                if(i>=3){
                    for(int k=0;k<4;++k){
                        if(b.board[i-k][j]==1) aiScore++;
                        else if(b.board[i-k][j]==2) humanScore++;
                        else break;
                    }
                    if(aiScore==4)return 1; else if (humanScore==4)return 2;
                    aiScore = 0; humanScore = 0;
                }

                //Checking diagonal up-right
                if(j<=3 && i>= 3){
                    for(int k=0;k<4;++k){
                        if(b.board[i-k][j+k]==1) aiScore++;
                        else if(b.board[i-k][j+k]==2) humanScore++;
                        else break;
                    }
                    if(aiScore==4)return 1; else if (humanScore==4)return 2;
                    aiScore = 0; humanScore = 0;
                }

                //Checking diagonal up-left
                if(j>=3 && i>=3){
                    for(int k=0;k<4;++k){
                        if(b.board[i-k][j-k]==1) aiScore++;
                        else if(b.board[i-k][j-k]==2) humanScore++;
                        else break;
                    }
                    if(aiScore==4)return 1; else if (humanScore==4)return 2;
                    aiScore = 0; humanScore = 0;
                }
            }
        }

        for(int j=0;j<7;++j){
            //Game has not ended yet
            if(b.board[0][j]==0)return -1;
        }
        //Game draw!
        return -1;
    }

}