/**
    /**
     * //     * Checking verical columns for wins (4 in a row)
     * //     * @param row
     * //     * @param col
     * //     * @param board
     * //     * @return
     */
    public boolean checkWin() {
        int verticalIndex=0;
        int horizontalIndex = 0;
        int diagonalIndexLeft = 0;
        int diagonalIndexRight = 0;
        int diagonalIndexRow = 0;
        int diagonalIndexCol=0;

        Boolean checkWin=false;
        //Vertical checking
        int piecesInCol =0;
        int piecesInRow = 0;
        int temp=0;
        temp = board[0][col];
        for(int i=0;i<board.length;i++)
        {
            if(board[i][col]!=0)
            {
                piecesInCol++;
            }
        }
        for(int i=0;i<piecesInCol;i++)
        {
            if (temp == 0) {
                break;
            }
            if (temp == board[i][col]) {
                verticalIndex++;
            } else {
                temp = board[i][col];
                verticalIndex = 1;
            }
            if (verticalIndex == 4) {
                //System.out.println("caught vertical");
                checkWin = true;
                return checkWin;
            }
        }
        //
        for (int i = 0; i < 6; i++) {
            for (int j = 1; j < 7; j++)
            {
                if (board[i][j] != 0 && board[i][j] == board[i][j - 1]) {
                    horizontalIndex++;
                } else {
                    horizontalIndex = 1;
                }
                if (horizontalIndex == 4) {
                    checkWin = true;
                    //System.out.println("caught horizontal");
                    return checkWin;
                }
            }
        }
        for (int i = 0; i < 6; i++)
        {
            for (int j = 1; j < 7; j++) {
                if (i + j >= 6) break;
                if (board[j][i + j] != 0 && board[j - 1][(j + i) - 1] == board[j][i + j]) {
                    diagonalIndexLeft++;
                } else
                {
                    diagonalIndexLeft = 1;
                }
                if (diagonalIndexLeft == 4 || diagonalIndexRow == 4 ) {
                    checkWin = true;
                    //System.out.println("Caught diagonal bottom left to top right");
                    //printBoard(board);
                    return checkWin;
                }
            }
        }
        for (int i = 0; i < 6; i++) {
            for (int j = 1; j < 7; j++)
            {
                if(i+j>=6)break;
                if (board[j + i][j] != 0 && board[(i + j) - 1][j - 1] == board[i + j][j]) {
                    diagonalIndexRow++;
                } else {
                    diagonalIndexRow = 1;
                }
                if (diagonalIndexRow == 4 ) {
                    checkWin = true;
                    //System.out.println("Caught diagonal row");
                    //printBoard(board);
                    return checkWin;
                }
            }

        }
            for (int i = 0; i < 6; i++) {
                for (int j = 1; j < 7; j++)
                {
                    diagonalIndexRight=0;
                    if(i-j<0)break;
                    if (board[j][i - j] != 0 && board[j - 1][(i - j) + 1] == board[j][i - j]) {
                        diagonalIndexRight++;
                    } else {
                        diagonalIndexRight = 1;
                    }
                    if (diagonalIndexRight == 4 ) {
                        checkWin = true;
                        //System.out.println("Caught diagonal righty");
                        //printBoard(board);
                        return checkWin;
                    }
                }
            }
        for (int i = 0; i < 6; i++)
        {
            for (int j = 4; j >= 0; j--)
            {
                if(j-i<0)break;
                if (board[j-i][j] != 0 && board[(j-i)+1][j + 1] == board[j-i][j]) {
                    diagonalIndexCol++;
                } else {
                    diagonalIndexCol = 1;
                }
                if (diagonalIndexCol == 4 ) {
                    checkWin = true;
                    //System.out.println("Caught diagonal col");
                    //printBoard(board);
                    return checkWin;
                }
            }
        }
        return checkWin;
}


//    public static void main(String[] args) throws IOException
//    {
//        Board b = new Board();
//        board = b.runBoard();
//        currentPlayer=1;
//        Random rand = new Random();
//        System.out.println("INITAL BOARD");
//        b.printBoard(board);
//        miniMax miniMax= new miniMax(30000000,b);
//        int column=0;
//        while(b.isFinished()==-1)
//        {
//            if(currentPlayer==1)
//            {
//                System.out.println("After player 1");
//
//                column = (rand.nextInt() * 100) % 6;
//            }
//            else
//            {
//                System.out.println("After player 2");
//                column = miniMax.miniMaxDecision(b);
//            }
//            while(!b.insert(column,currentPlayer))
//            {
//                column = (rand.nextInt() * 100) % 6;
//            }
//            b.printBoard(board);
//            changePlayer();
//            winner =b.isFinished();
//        }
//    }
//    public static void changePlayer()
//    {
//        if (currentPlayer == 1)
//            currentPlayer = 2;
//        else currentPlayer = 1;
//    }
int verticalIndex = 0;
        int horizontalIndex = 0;
        int diagonalIndexLeft = 0;
        int diagonalIndexRight = 0;
        int diagonalIndexRow = 0;
        int diagonalIndexCol = 0;

        Boolean checkWin = false;
        //Vertical checking
        int piecesInCol = 0;
        int piecesInRow = 0;
        int temp = 0;
        temp = board[0][col];
        for (int i = 0; i < board.length; i++) {
            if (board[i][col] != 0) {
                piecesInCol++;
            }
        }
        for (int i = 0; i < piecesInCol; i++) {
            if (temp == 0) {
                break;
            }
            if (temp == board[i][col]) {
                verticalIndex++;
            } else {
                temp = board[i][col];
                verticalIndex = 1;
            }
            if (verticalIndex == 4) {
                //System.out.println("caught vertical");
                checkWin = true;
                return checkWin;
            }
        }
        //
        for (int i = 0; i < 6; i++) {
            for (int j = 1; j < 7; j++) {
                if (board[i][j] != 0 && board[i][j] == board[i][j - 1]) {
                    horizontalIndex++;
                } else {
                    horizontalIndex = 1;
                }
                if (horizontalIndex == 4) {
                    checkWin = true;
                    //System.out.println("caught horizontal");
                    return checkWin;
                }
            }
        }
       for (int i = 0; i < 6; i++) {
            for (int j = 1; j < 7; j++) {
                if (i + j >= 6) break;
                if (board[j][i + j] != 0 && board[j - 1][(j + i) - 1] == board[j][i + j]) {
                    diagonalIndexLeft++;
                } else {
                    diagonalIndexLeft = 1;
                }
                if (diagonalIndexLeft == 4 || diagonalIndexRow == 4) {
                    checkWin = true;
                    //System.out.println("Caught diagonal bottom left to top right");
                    //printBoard(board);
                    return checkWin;
                }
            }
        }
        for (int i = 0; i < 6; i++) {
            for (int j = 1; j < 7; j++) {
                if (i + j >= 6) break;
                if (board[j + i][j] != 0 && board[(i + j) - 1][j - 1] == board[i + j][j]) {
                    diagonalIndexRow++;
                } else {
                    diagonalIndexRow = 1;
                }
                if (diagonalIndexRow == 4) {
                    checkWin = true;
                    //System.out.println("Caught diagonal row");
                    //printBoard(board);
                    return checkWin;
                }
            }

        }
        for (int i = 0; i < 6; i++) {
            for (int j = 1; j < 7; j++) {
                diagonalIndexRight = 0;
                if (i - j < 0) break;
                if (board[j][i - j] != 0 && board[j - 1][(i - j) + 1] == board[j][i - j]) {
                    diagonalIndexRight++;
                } else {
                    diagonalIndexRight = 1;
                }
                if (diagonalIndexRight == 4) {
                    checkWin = true;
                    //System.out.println("Caught diagonal righty");
                    //printBoard(board);
                    return checkWin;
                }
            }
        }
        for (int i = 0; i < 6; i++) {
            for (int j = 4; j >= 0; j--) {
                if (j - i < 0) break;
                if (board[j - i][j] != 0 && board[(j - i) + 1][j + 1] == board[j - i][j]) {
                    diagonalIndexCol++;
                } else {
                    diagonalIndexCol = 1;
                }
                if (diagonalIndexCol == 4) {
                    checkWin = true;
                    //System.out.println("Caught diagonal col");
                    //printBoard(board);
                    return checkWin;
                }
            }
        }